# -*- coding: utf-8 -*-
"""AAPL RUN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sicIfsaj8RZRIatfa5ZJdS5vfYUsngs8
"""

# prompt: azure-iot-device and azure-iot-hub python libraries install

!pip install azure-iot-device
!pip install azure-iot-hub
!pip install azure.eventhub

import requests
import time
import json
from azure.eventhub import EventHubProducerClient, EventData

def fetch_stock_price():
    # API URL for MSFT stock prices
    api_url = "https://api.twelvedata.com/time_series?apikey=0f7a1eef3974452cbe0417cb28fa9652&interval=1min&type=stock&dp=1&symbol=AAPL&format=JSON"

    # Send a GET request to the API
    response = requests.get(api_url)

    # Parse the JSON response if the request was successful
    data = response.json() if response.status_code == 200 else {}

    print(data["values"][0])
    # Extracting data for the most recent time point
    stock_data = data["values"][0] if "values" in data and len(data["values"]) > 0 else 'Unavailable'
    aapl_dict = {
        'datetime': data["values"][0]['datetime'],
        'open': float(data["values"][0]['open']),
        'high': float(data["values"][0]['high']),
        'low': float(data["values"][0]['low']),
        'close': float(data["values"][0]['close']),
        'volume': float(data["values"][0]['volume'])
    }
    return aapl_dict

def send_to_event_hub(data):
    # Azure Event Hub connection details
    connection_str = "Endpoint=sb://btcstock.servicebus.windows.net/;SharedAccessKeyName=manageaapl;SharedAccessKey=JTFonh9qdgz2SVLa8mW9na7mvk8TQzf/u+AEhOtR/GU=;EntityPath=aapl"
    eventhub_name = "aapl"

    # Create a producer client to send messages to the event hub
    producer = EventHubProducerClient.from_connection_string(conn_str=connection_str, eventhub_name=eventhub_name)
    event_data_batch = producer.create_batch()

    # Serialize the data to a JSON string and add it to the batch
    event_data_batch.add(EventData(json.dumps(data)))

    # Send the batch of events to the event hub
    with producer:
        producer.send_batch(event_data_batch)
        print("AAPL stock data sent to Event Hub")

def main():
    while True:
        # Fetch the MSFT stock price data
        data = fetch_stock_price()

        # Send the fetched data to Azure Event Hub
        send_to_event_hub(data)

        # Wait for 60 seconds before fetching again
        time.sleep(60)

# Run the main function if this script is executed as the main program
if __name__ == "__main__":
    main()

